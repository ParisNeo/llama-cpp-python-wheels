name: Build llama-cpp-python Wheels

on:
  workflow_dispatch:
    inputs:
      llama_cpp_python_ref:
        description: 'llama-cpp-python git ref (tag, branch, commit)'
        required: true
        default: 'main'
      backends:
        description: 'Comma-separated list of backends (e.g., cpu,cuda,metal)'
        required: true
        default: 'cpu,metal'
  schedule:
    - cron: '0 3 * * 0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      llama_version: ${{ steps.get_version.outputs.version }}
      llama_ref: ${{ github.event.inputs.llama_cpp_python_ref || 'main' }}
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout llama-cpp-python (${{ github.event.inputs.llama_cpp_python_ref || 'main' }})
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          ref: ${{ github.event.inputs.llama_cpp_python_ref || 'main' }}
          submodules: 'recursive'
          path: 'llama-cpp-python-src'

      - name: Get llama-cpp-python version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' llama-cpp-python-src/pyproject.toml | awk -F'"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Determined version: $VERSION"

      - name: Generate Build Matrix
        id: generate_matrix
        run: |
          echo "Attempting to install jq..."
          sudo apt-get update && sudo apt-get install -y jq
          APT_EXIT_CODE=$?
          if [ $APT_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to install jq. apt-get exit code: $APT_EXIT_CODE"
            exit 1
          fi
          echo "jq installed successfully."

          echo "Defining JSON matrix..."
          cat << 'EOM' > matrix_def.json
          {
            "include": [
              { "os": "ubuntu-latest", "python": "3.10", "arch": "x86_64", "backend": "cpu", "cmake_args": "-DGGML_BLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS", "runner": "ubuntu-latest", "cibw_platform": "linux" },
              { "os": "windows-latest", "python": "3.10", "arch": "AMD64", "backend": "cpu", "cmake_args": "-DGGML_BLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS", "runner": "windows-latest", "cibw_platform": "windows" },
              { "os": "macos-latest", "python": "3.10", "arch": "x86_64", "backend": "cpu", "cmake_args": "-DGGML_BLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS", "runner": "macos-latest", "cibw_platform": "macos" },
              { "os": "macos-latest", "python": "3.10", "arch": "arm64", "backend": "cpu", "cmake_args": "-DGGML_BLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS -DCMAKE_OSX_ARCHITECTURES=arm64", "runner": "macos-latest", "cibw_platform": "macos"},
              { "os": "macos-latest", "python": "3.10", "arch": "arm64", "backend": "metal", "cmake_args": "-DGGML_METAL=on -DCMAKE_OSX_ARCHITECTURES=arm64", "runner": "macos-latest", "cibw_platform": "macos"}
            ]
          }
          EOM
          echo "JSON definition written to matrix_def.json"

          echo "--- Raw matrix definition (matrix_def.json) ---"
          cat matrix_def.json
          echo "-----------------------------------------------"

          echo "Attempting to validate and compact JSON with jq..."
          COMPACT_JSON=$(jq -c . < matrix_def.json)
          JQ_EXIT_CODE=$?

          if [ $JQ_EXIT_CODE -ne 0 ]; then
            echo "::error::jq failed to process the JSON matrix (Exit Code: $JQ_EXIT_CODE). Check JSON syntax above."
            exit 1
          fi

          if [ -z "$COMPACT_JSON" ]; then
            echo "::error::jq succeeded but produced empty output. This should not happen with valid JSON."
            exit 1
          fi

          echo "jq processed JSON successfully."
          echo "--- Compacted JSON ---"
          echo "$COMPACT_JSON"
          echo "----------------------"

          echo "Setting GitHub Actions output variable 'matrix'..."
          echo "matrix=$COMPACT_JSON" >> "$GITHUB_OUTPUT"
          ECHO_EXIT_CODE=$?

          if [ $ECHO_EXIT_CODE -ne 0 ]; then
            echo "::error::Failed to write matrix output variable to $GITHUB_OUTPUT (Exit Code: $ECHO_EXIT_CODE)."
            exit 1
          fi

          echo "Matrix output variable set successfully."
        shell: bash

  build_wheels:
    needs: prepare
    name: Build (${{ matrix.os }}, Py${{ matrix.python }}, ${{ matrix.arch }}, ${{ matrix.backend }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout llama-cpp-python (${{ needs.prepare.outputs.llama_ref }})
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          ref: ${{ needs.prepare.outputs.llama_ref }}
          submodules: 'recursive'
          path: 'llama-cpp-python-src'

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.17.0

      - name: Install Linux Dependencies (CPU)
        if: runner.os == 'Linux' && matrix.backend == 'cpu'
        run: sudo apt-get update && sudo apt-get install -y libopenblas-dev build-essential cmake

      - name: Install MacOS Dependencies (CPU/Metal)
        if: runner.os == 'macOS'
        run: brew install openblas cmake || true

      - name: Install Windows Dependencies (CPU)
        if: runner.os == 'Windows'
        run: echo "Windows dependencies setup (check runner image)"

      - name: Build wheels
        env:
          CIBW_ENVIRONMENT_LINUX: "CMAKE_ARGS='${{ matrix.cmake_args }}'"
          CIBW_ENVIRONMENT_MACOS: "CMAKE_ARGS='${{ matrix.cmake_args }}'"
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_ARGS='${{ matrix.cmake_args }}'"
          CIBW_PLATFORM: ${{ matrix.cibw_platform }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.8"
        run: |
          cd llama-cpp-python-src
          python -m cibuildwheel --output-dir ../wheelhouse

      - name: Store wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.backend }}-py${{ matrix.python }}
          path: wheelhouse/*.whl

  release:
    needs: [prepare, build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -name '*.whl'

      - name: Create or Update Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: llama-cpp-python-v${{ needs.prepare.outputs.version }}
          name: Wheels for llama-cpp-python v${{ needs.prepare.outputs.version }}
          body: |
            Automated build of wheels for llama-cpp-python version ${{ needs.prepare.outputs.version }} (ref: ${{ needs.prepare.outputs.llama_ref }}).

            **Installation:**

            Find the appropriate wheel file for your OS, Python version, and backend below. Download it and install using pip:
            `pip install /path/to/downloaded/wheel.whl`

            Or, use the extra index URL (if configured via GitHub Pages):
            `pip install llama-cpp-python --extra-index-url https://parisneo.github.io/llama-cpp-python-wheels/whl/<backend>/`

            **Built Wheels:**
            (List will be populated by uploaded assets)
          draft: false
          prerelease: false
          files: artifacts/**/*.whl