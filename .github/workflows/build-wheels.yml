name: Build llama-cpp-python Wheels

on:
  workflow_dispatch:
    inputs:
      llama_cpp_python_ref:
        description: 'llama-cpp-python git ref (tag, branch, commit)'
        required: true
        default: 'main'
      backends:
        description: 'Comma-separated list of backends (e.g., cpu,cuda,metal,rocm)'
        required: true
        default: 'cpu,cuda'
      python_versions:
        description: 'Comma-separated list of Python versions (e.g., 3.9,3.10,3.11,3.12)'
        required: true
        default: '3.10,3.11,3.12'
      cuda_version:
        description: 'CUDA version to build against if cuda backend selected (e.g., 11.8, 12.1, 12.4)'
        required: false
        default: '12.1'

  schedule:
    - cron: '0 3 * * 0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      llama_version: ${{ steps.get_version.outputs.version }}
      llama_ref: ${{ github.event.inputs.llama_cpp_python_ref || 'main' }}
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
    steps:
      - name: Checkout llama-cpp-python (${{ github.event.inputs.llama_cpp_python_ref || 'main' }})
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          ref: ${{ github.event.inputs.llama_cpp_python_ref || 'main' }}
          submodules: 'recursive'
          path: 'llama-cpp-python-src'

      - name: Get llama-cpp-python version
        id: get_version
        run: |
          VERSION=$(grep '^version = ' llama-cpp-python-src/pyproject.toml | awk -F'"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Determined version: $VERSION"

      - name: Generate Build Matrix
        id: generate_matrix
        env:
          REQUESTED_BACKENDS: ${{ github.event.inputs.backends || 'cpu,cuda' }}
          REQUESTED_PY_VERSIONS: ${{ github.event.inputs.python_versions || '3.10,3.11,3.12' }}
          REQUESTED_CUDA_VERSION: ${{ github.event.inputs.cuda_version || '12.1' }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          if [ $? -ne 0 ]; then echo "::error::Failed to install jq."; exit 1; fi

          declare -A BASE_CONFIGS
          BASE_CONFIGS["linux_x86_64"]="os=ubuntu-latest arch=x86_64 runner=ubuntu-latest cibw_platform=linux"
          BASE_CONFIGS["windows_amd64"]="os=windows-latest arch=AMD64 runner=windows-latest cibw_platform=windows"
          BASE_CONFIGS["macos_x86_64"]="os=macos-latest arch=x86_64 runner=macos-latest cibw_platform=macos"
          BASE_CONFIGS["macos_arm64"]="os=macos-latest arch=arm64 runner=macos-latest cibw_platform=macos"

          IFS=',' read -ra BACKENDS <<< "$REQUESTED_BACKENDS"
          IFS=',' read -ra PY_VERSIONS <<< "$REQUESTED_PY_VERSIONS"
          CUDA_VERSION_NODOT="${REQUESTED_CUDA_VERSION//./}"
          JSON_ENTRIES=""

          for py_ver in "${PY_VERSIONS[@]}"; do
            py_ver=$(echo "$py_ver" | xargs)
            cibw_build_spec="cp${py_ver//./}-*"
            for backend in "${BACKENDS[@]}"; do
              backend=$(echo "$backend" | xargs)

              if [[ "$backend" == "cpu" ]]; then
                CMAKE_ARGS="-DGGML_BLAS=ON -DGGML_BLAS_VENDOR=OpenBLAS"
                for key in "${!BASE_CONFIGS[@]}"; do
                  BASE_CFG="${BASE_CONFIGS[$key]}"
                  ENTRY_OS=$(echo "$BASE_CFG" | grep -o 'os=[^ ]*' | cut -d= -f2)
                  ENTRY_ARCH=$(echo "$BASE_CFG" | grep -o 'arch=[^ ]*' | cut -d= -f2)
                  ENTRY_RUNNER=$(echo "$BASE_CFG" | grep -o 'runner=[^ ]*' | cut -d= -f2)
                  ENTRY_CIBW_PLATFORM=$(echo "$BASE_CFG" | grep -o 'cibw_platform=[^ ]*' | cut -d= -f2)
                  ENTRY_CMAKE_ARGS="$CMAKE_ARGS"
                  if [[ "$key" == "macos_arm64" ]]; then
                     ENTRY_CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_OSX_ARCHITECTURES=arm64"
                  fi
                  JSON_OBJ=$(jq -n --arg os "$ENTRY_OS" --arg python "$py_ver" --arg arch "$ENTRY_ARCH" --arg backend "cpu" --arg cmake_args "$ENTRY_CMAKE_ARGS" --arg runner "$ENTRY_RUNNER" --arg cibw_platform "$ENTRY_CIBW_PLATFORM" --arg cibw_build_spec "$cibw_build_spec" '{os: $os, python: $python, arch: $arch, backend: $backend, cmake_args: $cmake_args, runner: $runner, cibw_platform: $cibw_platform, cibw_build_spec: $cibw_build_spec}')
                  JSON_ENTRIES+="$JSON_OBJ,"
                done
              fi

              if [[ "$backend" == "cuda" ]]; then
                BACKEND_NAME="cu${CUDA_VERSION_NODOT}"
                CMAKE_ARGS="-DGGML_CUDA=ON -DCMAKE_CUDA_ARCHITECTURES=native"
                
                BASE_CFG_LINUX="${BASE_CONFIGS['linux_x86_64']}"
                JSON_OBJ_LINUX=$(jq -n --arg os "$(echo "$BASE_CFG_LINUX" | grep -o 'os=[^ ]*' | cut -d= -f2)" --arg python "$py_ver" --arg arch "$(echo "$BASE_CFG_LINUX" | grep -o 'arch=[^ ]*' | cut -d= -f2)" --arg backend "$BACKEND_NAME" --arg cmake_args "$CMAKE_ARGS" --arg runner "$(echo "$BASE_CFG_LINUX" | grep -o 'runner=[^ ]*' | cut -d= -f2)" --arg cibw_platform "$(echo "$BASE_CFG_LINUX" | grep -o 'cibw_platform=[^ ]*' | cut -d= -f2)" --arg cibw_build_spec "$cibw_build_spec" '{os: $os, python: $python, arch: $arch, backend: $backend, cmake_args: $cmake_args, runner: $runner, cibw_platform: $cibw_platform, cibw_build_spec: $cibw_build_spec}')
                JSON_ENTRIES+="$JSON_OBJ_LINUX,"

                BASE_CFG_WINDOWS="${BASE_CONFIGS['windows_amd64']}"
                JSON_OBJ_WINDOWS=$(jq -n --arg os "$(echo "$BASE_CFG_WINDOWS" | grep -o 'os=[^ ]*' | cut -d= -f2)" --arg python "$py_ver" --arg arch "$(echo "$BASE_CFG_WINDOWS" | grep -o 'arch=[^ ]*' | cut -d= -f2)" --arg backend "$BACKEND_NAME" --arg cmake_args "$CMAKE_ARGS" --arg runner "$(echo "$BASE_CFG_WINDOWS" | grep -o 'runner=[^ ]*' | cut -d= -f2)" --arg cibw_platform "$(echo "$BASE_CFG_WINDOWS" | grep -o 'cibw_platform=[^ ]*' | cut -d= -f2)" --arg cibw_build_spec "$cibw_build_spec" '{os: $os, python: $python, arch: $arch, backend: $backend, cmake_args: $cmake_args, runner: $runner, cibw_platform: $cibw_platform, cibw_build_spec: $cibw_build_spec}')
                JSON_ENTRIES+="$JSON_OBJ_WINDOWS,"
              fi

              if [[ "$backend" == "metal" ]]; then
                 BASE_CFG="${BASE_CONFIGS['macos_arm64']}"
                 CMAKE_ARGS="-DGGML_METAL=on -DCMAKE_OSX_ARCHITECTURES=arm64"
                 JSON_OBJ=$(jq -n --arg os "$(echo "$BASE_CFG" | grep -o 'os=[^ ]*' | cut -d= -f2)" --arg python "$py_ver" --arg arch "$(echo "$BASE_CFG" | grep -o 'arch=[^ ]*' | cut -d= -f2)" --arg backend "metal" --arg cmake_args "$CMAKE_ARGS" --arg runner "$(echo "$BASE_CFG" | grep -o 'runner=[^ ]*' | cut -d= -f2)" --arg cibw_platform "$(echo "$BASE_CFG" | grep -o 'cibw_platform=[^ ]*' | cut -d= -f2)" --arg cibw_build_spec "$cibw_build_spec" '{os: $os, python: $python, arch: $arch, backend: $backend, cmake_args: $cmake_args, runner: $runner, cibw_platform: $cibw_platform, cibw_build_spec: $cibw_build_spec}')
                 JSON_ENTRIES+="$JSON_OBJ,"
              fi
              
            done
          done

          JSON_ENTRIES=${JSON_ENTRIES%,}
          FINAL_JSON="{\"include\": [$JSON_ENTRIES]}"

          echo "$FINAL_JSON" | jq .

          COMPACT_JSON=$(echo "$FINAL_JSON" | jq -c .)
          JQ_EXIT_CODE=$?
          if [ $JQ_EXIT_CODE -ne 0 ]; then echo "::error::jq failed to process the FINAL JSON matrix (Exit Code: $JQ_EXIT_CODE)."; exit 1; fi
          if [ -z "$COMPACT_JSON" ]; then echo "::error::jq produced empty output for FINAL JSON."; exit 1; fi

          echo "matrix=$COMPACT_JSON" >> "$GITHUB_OUTPUT"
          if [ $? -ne 0 ]; then echo "::error::Failed to write matrix output variable."; exit 1; fi

        shell: bash

  build_wheels:
    needs: prepare
    name: Build (${{ matrix.os }}, Py${{ matrix.python }}, ${{ matrix.arch }}, ${{ matrix.backend }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    steps:
      - name: Checkout llama-cpp-python (${{ needs.prepare.outputs.llama_ref }})
        uses: actions/checkout@v4
        with:
          repository: abetlen/llama-cpp-python
          ref: ${{ needs.prepare.outputs.llama_ref }}
          submodules: 'recursive'
          path: 'llama-cpp-python-src'

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.17.0

      - name: Setup vcpkg (Windows only)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 'ce613c41372b23b1f51333815feb3edd87ef8a8b'

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
          if [[ "${{ matrix.backend }}" == "cpu" ]]; then
            sudo apt-get install -y libopenblas-dev
          elif [[ "${{ matrix.backend }}" == "cu121" || "${{ matrix.backend }}" == "cu118" || "${{ matrix.backend }}" == "cu124" ]]; then
            echo "::warning::CUDA Linux dependencies needed (toolkit, drivers, etc. for ${{ matrix.backend }})"
          fi

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake || true
          if [[ "${{ matrix.backend }}" == "cpu" || "${{ matrix.backend }}" == "metal" ]]; then
             brew install openblas || true
          fi

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          vcpkg install pkg-config:x64-windows --triplet x64-windows
          if [[ "${{ matrix.backend }}" == "cpu" ]]; then
            vcpkg install openblas:x64-windows --triplet x64-windows
          elif [[ "${{ matrix.backend }}" == "cu121" || "${{ matrix.backend }}" == "cu118" || "${{ matrix.backend }}" == "cu124" ]]; then
            echo "::warning::CUDA Windows dependencies needed (toolkit for ${{ matrix.backend }})"
            # vcpkg install openblas:x64-windows --triplet x64-windows
          fi
        shell: bash

      - name: Build wheels
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          # CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_BEFORE_BUILD_LINUX: >
            if [[ "${{ matrix.backend }}" == "cpu" ]]; then
              yum install -y openblas-devel;
            elif [[ "${{ matrix.backend }}" == "cu121" || "${{ matrix.backend }}" == "cu118" || "${{ matrix.backend }}" == "cu124" ]]; then
               echo "::warning::CUDA toolkit installation might be needed inside container for ${{ matrix.backend }}"
            fi &&
            pip install auditwheel
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            if [[ "${{ matrix.backend }}" == "cpu" ]]; then
              auditwheel repair -w {dest_dir} --lib-sdir /usr/lib64 {wheel} || auditwheel repair -w {dest_dir} --lib-sdir /usr/lib/x86_64-linux-gnu {wheel};
            else
              auditwheel repair -w {dest_dir} {wheel};
            fi
          CIBW_ENVIRONMENT_LINUX: "CMAKE_ARGS='${{ matrix.cmake_args }}'"
          CIBW_ENVIRONMENT_MACOS: "CMAKE_ARGS='${{ matrix.cmake_args }}'"
          CIBW_ENVIRONMENT_WINDOWS: "CMAKE_ARGS='${{ matrix.cmake_args }}' CMAKE_TOOLCHAIN_FILE='${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake'"
          CIBW_PLATFORM: ${{ matrix.cibw_platform }}
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.cibw_build_spec }}
          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.8"
        run: |
          echo "--- Environment for cibuildwheel ---"
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "CMAKE_ARGS=${{ matrix.cmake_args }}"
            echo "CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          else
            echo "CMAKE_ARGS=${{ matrix.cmake_args }}"
          fi
          echo "CIBW_PLATFORM=${{ matrix.cibw_platform }}"
          echo "CIBW_ARCHS=${{ matrix.arch }}"
          echo "CIBW_BUILD=${{ matrix.cibw_build_spec }}"
          echo "------------------------------------"
          cd llama-cpp-python-src
          python -m cibuildwheel --output-dir ../wheelhouse
        shell: bash

      - name: Store wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.backend }}-py${{ matrix.python }}
          path: wheelhouse/*.whl

  release:
    needs: [prepare, build_wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -name '*.whl'

      - name: Create or Update Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: llama-cpp-python-v${{ needs.prepare.outputs.version }}
          name: Wheels for llama-cpp-python v${{ needs.prepare.outputs.version }}
          body: |
            Automated build of wheels for llama-cpp-python version ${{ needs.prepare.outputs.version }} (ref: ${{ needs.prepare.outputs.llama_ref }}).

            **Installation:**

            Find the appropriate wheel file for your OS, Python version, and backend below. Download it and install using pip:
            `pip install /path/to/downloaded/wheel.whl`

            Or, use the extra index URL (if configured via GitHub Pages):
            `pip install llama-cpp-python --extra-index-url https://parisneo.github.io/llama-cpp-python-wheels/whl/<backend>/`
            (Replace `<backend>` with `cpu`, `cu121`, `cu124`, `metal`, etc.)

            **Built Wheels:**
            (List will be populated by uploaded assets)
          draft: false
          prerelease: false
          files: artifacts/**/*.whl